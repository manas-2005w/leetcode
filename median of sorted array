class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
       int m= nums1.size();
       int n= nums2.size();

       if (m>n){
        return findMedianSortedArrays(nums2, nums1);
       } 
       int left =0;
       int right = m;
       int partitionx,partitiony;

       while (left <=right)
       {
        partitionx = (left + right)/2;
        partitiony = (m + n + 1)/2 - partitionx;


        int maxX = (partitionx == 0) ? INT_MIN : nums1[partitionx - 1];
            int maxY = (partitiony == 0) ? INT_MIN : nums2[partitiony - 1];
            int minX = (partitionx == m) ? INT_MAX : nums1[partitionx];
            int minY = (partitiony == n) ? INT_MAX : nums2[partitiony];
            
            if (maxX <= minY && maxY <= minX) {
                if ((m + n) % 2 == 0) {
                    return (max(maxX, maxY) + min(minX, minY)) / 2.0;
                } else {
                    return max(maxX, maxY);
                }
            } else if (maxX > minY) {
                right = partitionx - 1;
            } else {
                left = partitionx + 1;
            }
        }
        
        
        return -1;
     }
    
};
